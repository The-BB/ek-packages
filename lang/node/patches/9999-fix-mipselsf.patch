--- a/deps/v8/src/base/cpu.cc
+++ b/deps/v8/src/base/cpu.cc
@@ -197,22 +197,11 @@ static uint32_t ReadELFHWCaps() {
 
 #if V8_HOST_ARCH_MIPS
 int __detect_fp64_mode(void) {
-  double result = 0;
-  // Bit representation of (double)1 is 0x3FF0000000000000.
-  __asm__ volatile(
-      ".set push\n\t"
-      ".set noreorder\n\t"
-      ".set oddspreg\n\t"
-      "lui $t0, 0x3FF0\n\t"
-      "ldc1 $f0, %0\n\t"
-      "mtc1 $t0, $f1\n\t"
-      "sdc1 $f0, %0\n\t"
-      ".set pop\n\t"
-      : "+m"(result)
-      :
-      : "t0", "$f0", "$f1", "memory");
-
-  return !(result == 1);
+#ifdef FPU_MODE_FP64
+  return 1;
+#else
+  return 0;
+#endif
 }
 
 
--- a/deps/v8/src/codegen/mips/constants-mips.h
+++ b/deps/v8/src/codegen/mips/constants-mips.h
@@ -140,7 +140,7 @@ const uint32_t kLeastSignificantByteInIn
 namespace v8 {
 namespace internal {
 
-constexpr size_t kMaxPCRelativeCodeRangeInMB = 4096;
+constexpr size_t kMaxPCRelativeCodeRangeInMB = 1024;
 
 // -----------------------------------------------------------------------------
 // Registers and FPURegisters.
--- a/deps/v8/src/codegen/mips/register-mips.h
+++ b/deps/v8/src/codegen/mips/register-mips.h
@@ -31,10 +31,13 @@ namespace internal {
 
 // Currently, MIPS just use even float point register, except
 // for C function param registers.
+#if defined(__mips__) && defined(__mips_hard_float) && __mips_hard_float != 0
 #define DOUBLE_USE_REGISTERS(V)                           \
-  V(f0)  V(f2)  V(f4)  V(f6)  V(f8)  V(f10) V(f12) V(f13) \
-  V(f14) V(f15) V(f16) V(f18) V(f20) V(f22) V(f24) V(f26) \
-  V(f28) V(f30)
+  V(f0)  V(f2)  V(f4)  V(f6)  V(f8)  V(f10) V(f12) V(f14) \
+  V(f16) V(f18) V(f20) V(f22) V(f24) V(f26) V(f28) V(f30)
+#else
+#define DOUBLE_USE_REGISTERS(V)
+#endif
 
 #define FLOAT_REGISTERS DOUBLE_REGISTERS
 #define SIMD128_REGISTERS(V)                              \
--- a/deps/v8/src/common/globals.h
+++ b/deps/v8/src/common/globals.h
@@ -284,7 +284,7 @@ constexpr size_t kMinimumCodeRangeSize =
 constexpr size_t kMinExpectedOSPageSize = 64 * KB;  // OS page on PPC Linux
 #elif V8_TARGET_ARCH_MIPS
 constexpr bool kPlatformRequiresCodeRange = false;
-constexpr size_t kMaximalCodeRangeSize = 2048LL * MB;
+constexpr size_t kMaximalCodeRangeSize = 512 * MB;
 constexpr size_t kMinimumCodeRangeSize = 0 * MB;
 constexpr size_t kMinExpectedOSPageSize = 4 * KB;  // OS page.
 #else
--- a/deps/v8/src/compiler/backend/mips/code-generator-mips.cc
+++ b/deps/v8/src/compiler/backend/mips/code-generator-mips.cc
@@ -4101,7 +4101,7 @@ void CodeGenerator::AssembleReturn(Instr
     } else if (FLAG_debug_code) {
       __ Assert(eq, AbortReason::kUnexpectedAdditionalPopValue,
                 g.ToRegister(additional_pop_count),
-                Operand(static_cast<int32_t>(0)));
+                Operand(static_cast<int>(0)));
     }
   }
   // Functions with JS linkage have at least one parameter (the receiver).
--- a/deps/v8/BUILD.gn
+++ b/deps/v8/BUILD.gn
@@ -228,10 +228,10 @@ declare_args() {
   v8_os_page_size = "0"
 
   # Similar to vfp but on MIPS.
-  v8_can_use_fpu_instructions = true
+  v8_can_use_fpu_instructions = false
 
   # Similar to the ARM hard float ABI but on MIPS.
-  v8_use_mips_abi_hardfloat = true
+  v8_use_mips_abi_hardfloat = false
 
   # Controls the threshold for on-heap/off-heap Typed Arrays.
   v8_typed_array_max_size_in_heap = 64
@@ -1079,37 +1079,7 @@ config("toolchain") {
 
   if (v8_current_cpu == "mipsel" || v8_current_cpu == "mips") {
     defines += [ "V8_TARGET_ARCH_MIPS" ]
-    if (v8_can_use_fpu_instructions) {
-      defines += [ "CAN_USE_FPU_INSTRUCTIONS" ]
-    }
-    if (v8_use_mips_abi_hardfloat) {
-      defines += [
-        "__mips_hard_float=1",
-        "CAN_USE_FPU_INSTRUCTIONS",
-      ]
-    } else {
-      defines += [ "__mips_soft_float=1" ]
-    }
-    if (mips_arch_variant == "r6") {
-      defines += [
-        "_MIPS_ARCH_MIPS32R6",
-        "FPU_MODE_FP64",
-      ]
-      if (mips_use_msa) {
-        defines += [ "_MIPS_MSA" ]
-      }
-    } else if (mips_arch_variant == "r2") {
-      defines += [ "_MIPS_ARCH_MIPS32R2" ]
-      if (mips_fpu_mode == "fp64") {
-        defines += [ "FPU_MODE_FP64" ]
-      } else if (mips_fpu_mode == "fpxx") {
-        defines += [ "FPU_MODE_FPXX" ]
-      } else if (mips_fpu_mode == "fp32") {
-        defines += [ "FPU_MODE_FP32" ]
-      }
-    } else if (mips_arch_variant == "r1") {
-      defines += [ "FPU_MODE_FP32" ]
-    }
+    defines += [ "__mips_soft_float=1" ]
 
     # TODO(infra): Add support for mips_arch_variant rx and loongson.
   }
--- a/test/common/index.js
+++ b/test/common/index.js
@@ -33,7 +33,7 @@ const { inspect } = require('util');
 const { isMainThread } = require('worker_threads');
 
 const tmpdir = require('./tmpdir');
-const bits = ['arm64', 'loong64', 'mips', 'mipsel', 'ppc64', 'riscv64', 's390x', 'x64']
+const bits = ['arm64', 'loong64', 'mips64el', 'ppc64', 'riscv64', 's390x', 'x64']
   .includes(process.arch) ? 64 : 32;
 const hasIntl = !!process.config.variables.v8_enable_i18n_support;
 
--- a/tools/v8_gypfiles/toolchain.gypi
+++ b/tools/v8_gypfiles/toolchain.gypi
@@ -53,10 +53,10 @@
     'arm_test_noprobe%': 'off',
 
     # Similar to vfp but on MIPS.
-    'v8_can_use_fpu_instructions%': 'true',
+    'v8_can_use_fpu_instructions%': 'false',
 
     # Similar to the ARM hard float ABI but on MIPS.
-    'v8_use_mips_abi_hardfloat%': 'true',
+    'v8_use_mips_abi_hardfloat%': 'false',
 
     # MIPS MSA support
     'mips_use_msa%': 0,
@@ -395,20 +395,8 @@
           'V8_TARGET_ARCH_MIPS',
         ],
         'conditions': [
-          [ 'v8_can_use_fpu_instructions=="true"', {
-            'defines': [
-              'CAN_USE_FPU_INSTRUCTIONS',
-            ],
-          }],
-          [ 'v8_use_mips_abi_hardfloat=="true"', {
-            'defines': [
-              '__mips_hard_float=1',
-              'CAN_USE_FPU_INSTRUCTIONS',
-            ],
-          }, {
-            'defines': [
-              '__mips_soft_float=1'
-            ]
+          [ 'v8_use_mips_abi_hardfloat=="false"', {
+            'defines': ['__mips_soft_float=1']
           }],
         ],
         'target_conditions': [
@@ -422,10 +410,7 @@
                 ],
                 'ldflags': ['-EB'],
                 'conditions': [
-                  [ 'v8_use_mips_abi_hardfloat=="true"', {
-                    'cflags': ['-mhard-float'],
-                    'ldflags': ['-mhard-float'],
-                  }, {
+                  [ 'v8_use_mips_abi_hardfloat=="false"', {
                     'cflags': ['-msoft-float'],
                     'ldflags': ['-msoft-float'],
                   }],
@@ -448,33 +433,9 @@
                   }],
                   ['mips_arch_variant=="r2"', {
                     'conditions': [
-                      [ 'mips_fpu_mode=="fp64"', {
-                        'defines': [
-                          '_MIPS_ARCH_MIPS32R2',
-                          'FPU_MODE_FP64',
-                        ],
-                        'cflags': ['-mfp64'],
-                      }],
-                      ['mips_fpu_mode=="fpxx"', {
-                        'defines': [
-                          '_MIPS_ARCH_MIPS32R2',
-                          'FPU_MODE_FPXX',
-                        ],
-                        'cflags': ['-mfpxx'],
-                      }],
-                      ['mips_fpu_mode=="fp32"', {
-                        'defines': [
-                          '_MIPS_ARCH_MIPS32R2',
-                          'FPU_MODE_FP32',
-                        ],
-                        'cflags': ['-mfp32'],
-                      }],
-                      [ 'clang==0', {
-                        'cflags': ['-Wa,-mips32r2'],
-                      }],
                     ],
-                    'cflags': ['-mips32r2'],
-                    'ldflags': ['-mips32r2'],
+                    'cflags': ['-msoft-float'],
+                    'ldflags': ['-msoft-float'],
                   }],
                   ['mips_arch_variant=="r1"', {
                     'defines': [
@@ -572,26 +533,6 @@
                 'defines': [ '_MIPS_MSA' ],
               }],
               ['mips_arch_variant=="r2"', {
-                'conditions': [
-                  ['mips_fpu_mode=="fp64"', {
-                    'defines': [
-                      '_MIPS_ARCH_MIPS32R2',
-                      'FPU_MODE_FP64',
-                    ],
-                  }],
-                  ['mips_fpu_mode=="fpxx"', {
-                    'defines': [
-                      '_MIPS_ARCH_MIPS32R2',
-                      'FPU_MODE_FPXX',
-                    ],
-                  }],
-                  ['mips_fpu_mode=="fp32"', {
-                    'defines': [
-                      '_MIPS_ARCH_MIPS32R2',
-                      'FPU_MODE_FP32'
-                    ],
-                  }],
-                ],
               }],
               ['mips_arch_variant=="r1"', {
                 'defines': ['FPU_MODE_FP32',],
@@ -605,17 +546,9 @@
           'V8_TARGET_ARCH_MIPS',
         ],
         'conditions': [
-          [ 'v8_can_use_fpu_instructions=="true"', {
-            'defines': [
-              'CAN_USE_FPU_INSTRUCTIONS',
-            ],
+          [ 'v8_can_use_fpu_instructions=="false"', {
           }],
-          [ 'v8_use_mips_abi_hardfloat=="true"', {
-            'defines': [
-              '__mips_hard_float=1',
-              'CAN_USE_FPU_INSTRUCTIONS',
-            ],
-          }, {
+          [ 'v8_use_mips_abi_hardfloat=="false"', {
             'defines': [
               '__mips_soft_float=1'
             ],
@@ -632,10 +565,7 @@
                 ],
                 'ldflags': ['-EL'],
                 'conditions': [
-                  [ 'v8_use_mips_abi_hardfloat=="true"', {
-                    'cflags': ['-mhard-float'],
-                    'ldflags': ['-mhard-float'],
-                  }, {
+                  [ 'v8_use_mips_abi_hardfloat=="false"', {
                     'cflags': ['-msoft-float'],
                     'ldflags': ['-msoft-float'],
                   }],
@@ -658,33 +588,9 @@
                   }],
                   ['mips_arch_variant=="r2"', {
                     'conditions': [
-                      [ 'mips_fpu_mode=="fp64"', {
-                        'defines': [
-                          '_MIPS_ARCH_MIPS32R2',
-                          'FPU_MODE_FP64',
-                        ],
-                        'cflags': ['-mfp64'],
-                      }],
-                      ['mips_fpu_mode=="fpxx"', {
-                        'defines': [
-                          '_MIPS_ARCH_MIPS32R2',
-                          'FPU_MODE_FPXX',
-                        ],
-                        'cflags': ['-mfpxx'],
-                      }],
-                      ['mips_fpu_mode=="fp32"', {
-                        'defines': [
-                          '_MIPS_ARCH_MIPS32R2',
-                          'FPU_MODE_FP32',
-                        ],
-                        'cflags': ['-mfp32'],
-                      }],
-                      [ 'clang==0', {
-                        'cflags': ['-Wa,-mips32r2'],
-                      }],
                     ],
-                    'cflags': ['-mips32r2'],
-                    'ldflags': ['-mips32r2'],
+                    'cflags': ['-msoft-float'],
+                    'ldflags': ['-msoft-float'],
                   }],
                   ['mips_arch_variant=="r1"', {
                     'defines': [
@@ -801,26 +707,6 @@
                 'defines': [ '_MIPS_MSA' ],
               }],
               ['mips_arch_variant=="r2"', {
-                'conditions': [
-                  ['mips_fpu_mode=="fp64"', {
-                    'defines': [
-                      '_MIPS_ARCH_MIPS32R2',
-                      'FPU_MODE_FP64',
-                    ],
-                  }],
-                  ['mips_fpu_mode=="fpxx"', {
-                    'defines': [
-                      '_MIPS_ARCH_MIPS32R2',
-                      'FPU_MODE_FPXX',
-                    ],
-                  }],
-                  ['mips_fpu_mode=="fp32"', {
-                    'defines': [
-                      '_MIPS_ARCH_MIPS32R2',
-                      'FPU_MODE_FP32'
-                    ],
-                  }],
-                ],
               }],
               ['mips_arch_variant=="r1"', {
                 'defines': ['FPU_MODE_FP32',],
