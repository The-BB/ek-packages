--- a/src/btop.cpp
+++ b/src/btop.cpp
@@ -868,7 +868,7 @@ int main(const int argc, const char** ar
 	}
 	//? If relative path failed, check two most common absolute paths
 	if (Theme::theme_dir.empty()) {
-		for (auto theme_path : {"/usr/local/share/btop/themes", "/usr/share/btop/themes"}) {
+		for (auto theme_path : {"/opt/share/btop/themes", "/opt/usr/share/btop/themes"}) {
 			if (fs::is_directory(fs::path(theme_path)) and access(theme_path, R_OK) != -1) {
 				Theme::theme_dir = fs::path(theme_path);
 				break;
--- a/src/btop_menu.cpp
+++ b/src/btop_menu.cpp
@@ -214,7 +214,7 @@ namespace Menu {
 				"Set color theme.",
 				"",
 				"Choose from all theme files in (usually)",
-				"\"/usr/[local/]share/btop/themes\" and",
+				"\"/opt/[usr/]share/btop/themes\" and",
 				"\"~/.config/btop/themes\".",
 				"",
 				"\"Default\" for builtin default theme.",
--- a/src/linux/btop_collect.cpp
+++ b/src/linux/btop_collect.cpp
@@ -247,9 +247,9 @@ namespace Shared {
 		if (procPath.empty())
 			throw std::runtime_error("Proc filesystem not found or no permission to read from it!");
 
-		passwd_path = (fs::is_regular_file(fs::path("/etc/passwd")) and access("/etc/passwd", R_OK) != -1) ? "/etc/passwd" : "";
+		passwd_path = (fs::is_regular_file(fs::path("/opt/etc/passwd")) and access("/opt/etc/passwd", R_OK) != -1) ? "/opt/etc/passwd" : "";
 		if (passwd_path.empty())
-			Logger::warning("Could not read /etc/passwd, will show UID instead of username.");
+			Logger::warning("Could not read /opt/etc/passwd, will show UID instead of username.");
 
 		coreCount = sysconf(_SC_NPROCESSORS_ONLN);
 		if (coreCount < 1) {
