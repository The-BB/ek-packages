--- a/cfgui/confmain.cpp
+++ b/cfgui/confmain.cpp
@@ -38,7 +38,7 @@ using namespace std;
 using namespace confgui;
 
 #ifndef DATADIR
-#define DATADIR "/usr/share/upmpdcli"
+#define DATADIR "/opt/share/upmpdcli"
 #endif
 string g_datadir(DATADIR "/");
 
--- a/samplescripts/Analog-Input
+++ b/samplescripts/Analog-Input
@@ -13,12 +13,12 @@
 # The general idea is that upmpdcli will create an Openhome Source for
 # each script it finds inside a designated directory.
 #
-# By default, the directory is '/usr/share/upmpdcli/src_scripts', but
+# By default, the directory is '/opt/share/upmpdcli/src_scripts', but
 # it can be changed by setting the "ohsrc_scripts_dir" configuration
-# variable inside /etc/upmpdcli.conf
+# variable inside /opt/etc/upmpdcli.conf
 #
 # Entries inside the directory will typically be created as symbolic
-# links to this file, which is installed as /usr/share/upmpdcli/Analog-Input
+# links to this file, which is installed as /opt/share/upmpdcli/Analog-Input
 #
 # The links must be named like SourceType-SourceName, where SourceType
 # MUST BE one of 'Analog', 'Digital', or 'Hdmi', (which are all the
--- a/scctl_src/scctl.cpp
+++ b/scctl_src/scctl.cpp
@@ -348,14 +348,14 @@ exitprog:
 bool sockname(string& nm)
 {
     char buf[80];
-    sprintf(buf, "/tmp/scctl%d", int(getuid()));
+    sprintf(buf, "/opt/tmp/scctl%d", int(getuid()));
     if (access(buf, 0) < 0) {
         if (mkdir(buf, 0700)) {
             perror("mkdir");
             return false;
         }
     }
-    sprintf(buf, "/tmp/scctl%d/sock", int(getuid()));
+    sprintf(buf, "/opt/tmp/scctl%d/sock", int(getuid()));
     nm = buf;
     return true;
 }
--- a/src/mediaserver/cdplugins/pycommon/upmplgutils.py
+++ b/src/mediaserver/cdplugins/pycommon/upmplgutils.py
@@ -178,7 +178,7 @@ def getcachedir(servicename, forcedpath=
             me = pwd.getpwuid(os.getuid()).pw_name
             uplog("getcachedir: me: %s" % me)
             if me == "upmpdcli":
-                cachedir = "/var/cache/upmpdcli/"
+                cachedir = "/opt/var/cache/upmpdcli/"
             else:
                 cachedir = os.path.expanduser("~/.cache/upmpdcli/")
         cachedir = os.path.join(cachedir, servicename)
--- a/src/mediaserver/cdplugins/pycommon/upradioconf.py
+++ b/src/mediaserver/cdplugins/pycommon/upradioconf.py
@@ -25,7 +25,7 @@ class UpmpdcliRadios(object):
     def __init__(self, upconfig):
         datadir = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
         if not os.path.isabs(datadir):
-            datadir = "/usr/share/upmpdcli"
+            datadir = "/opt/share/upmpdcli"
         self.fetchstream = os.path.join(datadir, "rdpl2stream", "fetchStream.py")
         self._radios = []
         self._readRadios(upconfig)
@@ -87,7 +87,7 @@ class UpmpdcliRadios(object):
         else:
             self._maxthreads = 5
         self._readRadiosFromConf(upconfig)
-        radiolist = getOptionValue("radiolist", "/usr/share/upmpdcli/radio_scripts/radiolist.conf")
+        radiolist = getOptionValue("radiolist", "/opt/share/upmpdcli/radio_scripts/radiolist.conf")
         if radiolist:
             radioconf = conftree.ConfSimple(radiolist)
             self._readRadiosFromConf(radioconf)
--- a/src/mediaserver/mediaserver.cxx
+++ b/src/mediaserver/mediaserver.cxx
@@ -70,7 +70,7 @@ bool MediaServer::readLibFile(const stri
         if (!iconpath.empty()) {
             string icondata, path, reason;
             if (!file_to_string(iconpath, icondata, &reason)) {
-                if (iconpath !=  "/usr/share/upmpdcli/icon.png") {
+                if (iconpath !=  "/opt/share/upmpdcli/icon.png") {
                     LOGERR("Failed reading "<< iconpath<<" : "<< reason <<"\n");
                 } else {
                     LOGDEB("Failed reading "<< iconpath<<" : "<< reason <<"\n");
--- a/src/radio_scripts/radio-paradise-get-flac.py
+++ b/src/radio_scripts/radio-paradise-get-flac.py
@@ -43,7 +43,7 @@ import os
 
 PY3 = sys.version > '3'
 
-tmpname = '/tmp/up-rp-pldata.json'
+tmpname = '/opt/tmp/up-rp-pldata.json'
 
 def debug(x):
     print("radio-paradise-get-flac.py: %s" % x, file=sys.stderr)
--- a/src/closefrom.cpp
+++ b/src/closefrom.cpp
@@ -122,7 +122,7 @@ int libclf_closefrom(int fd0)
         if (fd0 != 0)
             dup2(0, fd0);
     } else {
-        int fd = open("/etc/group", 0); // yes i am a unix man
+        int fd = open("/opt/etc/group", 0); // yes i am a unix man
         if (fd >= 0 && fd != fd0) {
             dup2(fd, fd0);
             close(fd);
--- a/src/main.cxx
+++ b/src/main.cxx
@@ -138,7 +138,7 @@ static vector<UpnpDevice *> devs;
 static MPDCli *mpdclip{nullptr};
 
 string g_datadir(DATADIR "/");
-string g_cachedir("/var/cache/upmpdcli");
+string g_cachedir("/opt/var/cache/upmpdcli");
 
 // Global
 string g_configfilename;
@@ -374,7 +374,7 @@ int main(int argc, char *argv[])
     getOptionValue("presentationhtml", presentationhtml);
     getOptionValue("cachedir", opts.cachedir);
     string pidfilename;
-    getOptionValue("pidfile", pidfilename, "/var/run/upmpdcli.pid");
+    getOptionValue("pidfile", pidfilename, "/opt/var/run/upmpdcli.pid");
 
     opts.schttpport = getIntOptionValue("schttpport", 0);
     getOptionValue("scplaymethod", opts.scplaymethod);
@@ -495,7 +495,7 @@ int main(int argc, char *argv[])
             return 1;
         }
         if (opts.cachedir.empty())
-            opts.cachedir = "/var/cache/upmpdcli";
+            opts.cachedir = "/opt/var/cache/upmpdcli";
     } else if (runas == geteuid()) {
         // Already running as upmpdcli user. There are actually 2
         // possibilities: either we were initially started as
@@ -509,7 +509,7 @@ int main(int argc, char *argv[])
         // wrong is to set cachedir in the configuration file
         // (opts.cachedir will be non-empty then).
         if (opts.cachedir.empty())
-            opts.cachedir = "/var/cache/upmpdcli";
+            opts.cachedir = "/opt/var/cache/upmpdcli";
     } else {
         if (opts.cachedir.empty())
             opts.cachedir = path_cat(path_tildexpand("~") , "/.cache/upmpdcli");
--- a/src/ohcredentials.cxx
+++ b/src/ohcredentials.cxx
@@ -51,7 +51,7 @@ using namespace std::placeholders;
 
 const size_t ohcreds_segsize{3000};
 const int ohcreds_segid{923102018};
-const char *ohcreds_segpath = "/etc/upmpdcli.conf";
+const char *ohcreds_segpath = "/opt/etc/upmpdcli.conf";
 
 static const string sTpCredentials("urn:av-openhome-org:service:Credentials:1");
 static const string sIdCredentials("urn:av-openhome-org:serviceId:Credentials");
--- a/src/upmpdcli.conf-dist
+++ b/src/upmpdcli.conf-dist
@@ -18,9 +18,9 @@
 # Log level for the low level UPnP lib.
 #upnploglevel = 2
 # XML and other constant data storage directory.
-#pkgdatadir=/usr/share/upmpdcli
+#pkgdatadir=/opt/share/upmpdcli
 # Name of the lock file used to store the current process pid.
-#pidfile = /var/run/upmpdcli.pid
+#pidfile = /opt/var/run/upmpdcli.pid
 
 # UPnP network parameters
 
@@ -50,15 +50,15 @@
 # Check that input format is supported.
 #checkcontentformat = 0
 # Path to the Renderer icon.
-#iconpath = /usr/share/upmpdcli/icon.png
+#iconpath = /opt/share/upmpdcli/icon.png
 # Save the streaming services login parameters to disk.
 #saveohcredentials = 1
 # Path to the openssl command
 #opensslcmd =
 # Directory used to store cached data
-#cachedir = /var/cache/upmpdcli
+#cachedir = /opt/var/cache/upmpdcli
 # Path to the presentation HTML document
-#presentationhtml = /usr/share/upmpdcli/presentation.html
+#presentationhtml = /opt/share/upmpdcli/presentation.html
 # Advertise L16 format support
 #enablel16 = true
 
@@ -104,9 +104,9 @@
 # The name of the room where the Product is located.
 #ohproductroom = Main Room
 # Path to an external file with radio definitions.
-#radiolist = /usr/share/upmpdcli/radio_scripts/radiolist.conf
+#radiolist = /opt/share/upmpdcli/radio_scripts/radiolist.conf
 # Radio metadata scripts directory.
-#radioscripts = /usr/share/upmpdcli/radio_scripts
+#radioscripts = /opt/share/upmpdcli/radio_scripts
 # Manufacturer name. 
 #ohmanufacturername = UpMPDCli heavy industries Co.
 # Manufacturer information. 
@@ -149,7 +149,7 @@
 # Decide if we proxy (copy: fetch/serve), or redirect the streaming services streams.
 #plgproxymethod = redirect
 # Path to the Media Server icon.
-#msiconpath = /usr/share/upmpdcli/icon.png
+#msiconpath = /opt/share/upmpdcli/icon.png
 # Directory from which the internal HTTP server will directly serve files
 #webserverdocumentroot =
 
@@ -221,9 +221,9 @@ uprcltitle = Local Music
 # Uprcl HTTP server port for serving media files.
 #uprclport = 9090
 # uprcl Recoll index directory
-#uprclconfdir = /var/cache/upmpdcli/uprcl
+#uprclconfdir = /opt/var/cache/upmpdcli/uprcl
 # Name of the user Recoll config additions file
-#uprclconfrecolluser = /var/cache/upmpdcli/uprcl/recoll.conf.user
+#uprclconfrecolluser = /opt/var/cache/upmpdcli/uprcl/recoll.conf.user
 # Name of the Minim Server configuration file
 #uprclminimconfig =
 # Media directories
@@ -337,6 +337,6 @@ upradiostitle = Upmpdcli Radio List
 # localhost port to be used by the auxiliary mpd.
 #scsendermpdport = 6700
 # External sources script directory.
-#scripts_dir = /usr/share/upmpdcli/src_scripts
+#scripts_dir = /opt/share/upmpdcli/src_scripts
 # Grace period to wait for a script process to exit before it is forcely killed.
 #scscriptgracesecs = 2
--- a/src/upmpdcli.conf-xml
+++ b/src/upmpdcli.conf-xml
@@ -33,16 +33,16 @@
 #upnploglevel = 2
 
 # <var name="pkgdatadir" type="dfn"><brief>XML and other constant data storage
-# directory.</brief><descr>Default: '$prefix/share/upmpdcli' (e.g.: '/usr/share/upmpdcli').
+# directory.</brief><descr>Default: '$prefix/share/upmpdcli' (e.g.: '/opt/share/upmpdcli').
 # </descr></var>
-#pkgdatadir=/usr/share/upmpdcli
+#pkgdatadir=/opt/share/upmpdcli
 
 # <var name="pidfile" type="fn">
 # <brief>Name of the lock file used to store the current process pid.</brief>
 # <descr>Only used if the process is launched by user root. Used by the init system, and to avoid
 # multiple instances. The only reason to change the value is if you actually want to have several
 # instances running (also change cachedir in this case).</descr></var>
-#pidfile = /var/run/upmpdcli.pid
+#pidfile = /opt/var/run/upmpdcli.pid
 
 
 # <grouptitle>UPnP network parameters</grouptitle>
@@ -128,7 +128,7 @@
 # 64x64 32 bits-per-pixel png file. Default: '$pkgdatadir/icon.png'.
 # The icon will only be read once, when upmpdcli starts
 # up.</descr></var>
-#iconpath = /usr/share/upmpdcli/icon.png
+#iconpath = /opt/share/upmpdcli/icon.png
 
 # <var name="saveohcredentials" type="bool"><brief>Save the streaming
 # services login parameters to disk.</brief><descr>This allows sharing the
@@ -141,15 +141,15 @@
 
 # <var name="opensslcmd" type="fn"><brief>Path to the openssl command</brief>
 # <descr>The OHCredentials service needs openssl 1.1.x or newer.
-# Path to the openssl command to use if the system one (in /usr/bin) is too
+# Path to the openssl command to use if the system one (in /opt/bin) is too
 # old. Not set by default.</descr></var>
 #opensslcmd = 
 
 # <var name="cachedir" type="dfn"><brief>Directory used to store cached
 # data</brief><descr>Only used for the OpenHome queue metadata for now.
 # The default value is ~/.cache/upmpdcli for normal users or
-# /var/cache/upmpdcli when upmpdcli is started as root.</descr></var>
-#cachedir = /var/cache/upmpdcli
+# /opt/var/cache/upmpdcli when upmpdcli is started as root.</descr></var>
+#cachedir = /opt/var/cache/upmpdcli
 
 # <var name="presentationhtml" type="fn"><brief>Path to the presentation HTML
 # document</brief><descr>You can change it to replace the default
@@ -157,7 +157,7 @@
 # up. It can't presently be used for status updates (but I guess that you
 # could put a redirect in there, to something more dynamic served by a real
 # HTTP server). Default: '$pkgdatadir/presentation.html'.</descr></var>
-#presentationhtml = /usr/share/upmpdcli/presentation.html
+#presentationhtml = /opt/share/upmpdcli/presentation.html
 
 # <var name="enablel16" type="bool">
 # <brief>Advertise L16 format support</brief>
@@ -207,22 +207,22 @@
 
 # <var name="onstart" type="fn"><brief>Command to run when playback is
 # about to begin.</brief><descr>Specify the full path to the program,
-# e.g. /usr/bin/logger.</descr></var>
+# e.g. /opt/bin/logger.</descr></var>
 #onstart =
 
 # <var name="onplay" type="fn"><brief>Command to run when MPD state
 # switches to "PLAY".  </brief><descr>Specify the full path to the program,
-# e.g. /usr/bin/logger.</descr></var>
+# e.g. /opt/bin/logger.</descr></var>
 #onplay =
 
 # <var name="onpause" type="fn"><brief>Command to run when MPD state
 # switches to "PAUSE".  </brief><descr>Specify the full path to the program,
-# e.g. /usr/bin/logger.</descr></var>
+# e.g. /opt/bin/logger.</descr></var>
 #onpause =
 
 # <var name="onstop" type="fn"><brief>Command to run when MPD state switches to
 # "STOP".</brief><descr>Specify the full path to the program,
-# e.g. /usr/bin/logger.</descr></var>
+# e.g. /opt/bin/logger.</descr></var>
 #onstop =
 
 # <var name="onstandby" type="fn"><brief>Command to run when the setstandby
@@ -289,18 +289,18 @@
 # to the end of the file).</descr>
 #
 # </var>
-#radiolist = /usr/share/upmpdcli/radio_scripts/radiolist.conf
+#radiolist = /opt/share/upmpdcli/radio_scripts/radiolist.conf
 
 # <var name="radioscripts" type="fn">
 # <brief>Radio metadata scripts directory.</brief>
 #
 # <descr>Path of a directory where the scripts used for fetching the
 # channel metadata are located. The default is
-# /usr/share/upmpdcli/radio_scripts. Note that the scripts are always first
+# /opt/share/upmpdcli/radio_scripts. Note that the scripts are always first
 # looked for in the locations defined by $PATH.</descr>
 #
 # </var>
-#radioscripts = /usr/share/upmpdcli/radio_scripts
+#radioscripts = /opt/share/upmpdcli/radio_scripts
 
 # <var name="ohmanufacturername" type="string"><brief>Manufacturer
 # name. </brief></var>
@@ -367,7 +367,7 @@
 #   - `0$uprcl$folders` Direct access to the Local Media [folders] tree.
 #
 # An alias must begin with `0` (which is the mandatory UPnP root object ID), followed by
-# `$pluginname$` where _pluginname_ could be any subdirectory of `/usr/share/upmpdcli/cdplugins`
+# `$pluginname$` where _pluginname_ could be any subdirectory of `/opt/share/upmpdcli/cdplugins`
 # except `pycommon` (e.g. `uprcl`, `qobuz`, `upradios`...), and the rest would depend on the plugin
 # type.
 # </descr></var>
@@ -400,13 +400,13 @@
 # it. Due to current (and probably permanent) *upmpdcli* limitations, the
 # image file *must* be a 64x64 32 bits-per-pixel png file. Default: '$pkgdatadir/icon.png'.
 # The icon will only be read once, when upmpdcli starts up.</descr></var>
-#msiconpath = /usr/share/upmpdcli/icon.png
+#msiconpath = /opt/share/upmpdcli/icon.png
 
 # <var name="webserverdocumentroot" type="fn">
 # <brief>Directory from which the internal HTTP server will directly serve files</brief>
 # <descr>This is disabled by default for compatibility with older versions which never served
 # files directly from the filesystem. Some Mediaserver plugins ask to enable it, e.g. for
-# serving icon files (normally from directories under /usr/share/upmpdcli/www).</descr></var>
+# serving icon files (normally from directories under /opt/share/upmpdcli/www).</descr></var>
 #webserverdocumentroot = 
 
 # <grouptitle>Highresaudio streaming service parameters</grouptitle>
@@ -545,22 +545,22 @@ uprcltitle = Local Music
 # <var name="uprclconfdir" type="dfn">
 # <brief>uprcl Recoll index directory</brief>
 # <descr>This is usually not defined and defaults to
-# /var/cache/upmpdcli/uprcl. The name is a bit misleading because there is
+# /opt/var/cache/upmpdcli/uprcl. The name is a bit misleading because there is
 # little real configuration data in there: it's mostly programmatically
 # generated from actual configuration found elsewhere (but also see
 # uprclconfrecolluser).</descr>
 # </var> 
-#uprclconfdir = /var/cache/upmpdcli/uprcl
+#uprclconfdir = /opt/var/cache/upmpdcli/uprcl
 
 # <var name="uprclconfrecolluser" type="fn">
 # <brief>Name of the user Recoll config additions file</brief>
 #
 # <descr>This is the name of a file with additional parameters for the
 # uprcl recoll.conf file, to which the contents will be appended before
-# indexing. The default is /var/cache/upmpdcli/uprcl/recoll.conf.user. If
+# indexing. The default is /opt/var/cache/upmpdcli/uprcl/recoll.conf.user. If
 # set, should be an absolute path.</descr>
 # </var>
-#uprclconfrecolluser = /var/cache/upmpdcli/uprcl/recoll.conf.user
+#uprclconfrecolluser = /opt/var/cache/upmpdcli/uprcl/recoll.conf.user
 
 # <var name="uprclminimconfig" type="fn">
 # <brief>Name of the Minim Server configuration file</brief>
@@ -777,7 +777,7 @@ upradiostitle = Upmpdcli Radio List
 #scusempdvolume = 0
 
 # <var name="sc2mpd" type="string"><brief>Path to
-# sc2mpd.</brief><descr>Only useful if it is not in /usr/bin and the
+# sc2mpd.</brief><descr>Only useful if it is not in /opt/bin and the
 # location is not in the $PATH for the init scripts.</descr></var>
 #sc2mpd = 
 
@@ -821,7 +821,7 @@ upradiostitle = Upmpdcli Radio List
 # directory.</brief><descr>Location for the scripts used to set up
 # additional external sources. See the Songcast Sender support
 # documentation page.</descr></var>
-#scripts_dir = /usr/share/upmpdcli/src_scripts
+#scripts_dir = /opt/share/upmpdcli/src_scripts
 
 # <var name="scscriptgracesecs" type="int" values="1 1000 2">
 # <brief>Grace period to wait for a script process to exit before it is
--- a/src/upmpd.cxx
+++ b/src/upmpd.cxx
@@ -102,7 +102,7 @@ bool UpMpdDevice::readLibFile(const stri
     if (!opts.iconpath.empty()) {
         string icondata;
         if (!file_to_string(opts.iconpath, icondata, &reason)) {
-            if (opts.iconpath.compare("/usr/share/upmpdcli/icon.png")) {
+            if (opts.iconpath.compare("/opt/share/upmpdcli/icon.png")) {
                 LOGERR("Failed reading " << opts.iconpath << " : " <<
                        reason << endl);
             } else {
--- a/web/init/scweb-service
+++ b/web/init/scweb-service
@@ -38,8 +38,8 @@ if [ -n "$INSTALL_DIR" ]; then
     binary="$INSTALL_DIR/scweb-standalone.py"
     scctl="$INSTALL_DIR/scctl"
 else
-    binary="/usr/share/upmpdcli/web/scweb-standalone.py"
-    scctl="/usr/bin/scctl"
+    binary="/opt/share/upmpdcli/web/scweb-standalone.py"
+    scctl="/opt/bin/scctl"
 fi
 
 # silently exit if the package was uninstalled but not purged,
@@ -72,8 +72,8 @@ elif [ -f /etc/lfs-release ]; then
     PIDFILE="/var/run/scweb-service.pid"
 else
     system=other
-    if [ -d /var/run -a -w /var/run ]; then
-        PIDFILE="/var/run/scweb-service"
+    if [ -d /opt/var/run -a -w /opt/var/run ]; then
+        PIDFILE="/opt/var/run/scweb-service"
     fi
 fi
 
--- a/meson.build
+++ b/meson.build
@@ -173,7 +173,7 @@ upmpdcli_data = files(
 )
 install_data(upmpdcli_data, install_dir: get_option('datadir') / 'upmpdcli')
 
-install_data('src/upmpdcli.conf-dist', install_dir: '/etc')
+install_data('src/upmpdcli.conf-dist', install_dir: '/opt/etc')
 
 install_subdir(
   'rdpl2stream',
--- a/tools/installconfig.sh
+++ b/tools/installconfig.sh
@@ -1,6 +1,6 @@
 #!/bin/sh
 
-configfile=${DESTDIR}/etc/upmpdcli.conf
+configfile=${DESTDIR}/opt/etc/upmpdcli.conf
 configsource=${MESON_SOURCE_ROOT}/src/upmpdcli.conf-dist
 
 test -f  "$configfile" || (cp "$configsource" "$configfile" && chmod 600 "$configfile")
